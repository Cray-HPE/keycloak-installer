#
# MIT License
#
# (C) Copyright 2020-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Needed for cleanup-old-cronjob.yaml job
kubectl:
  image:
    repository: artifactory.algol60.net/csm-docker/stable/docker-kubectl
    tag: 1.32.2

sqlCluster:
  image:
    repository: artifactory.algol60.net/csm-docker/stable/docker.io/library/postgres
    tag: 15-alpine
    pullPolicy: IfNotPresent

  # The logical backup configurations are set in the operatorconfiguration and cannot be overridden per cluster;
  # the cronjob schedule is an exception.
  logicalBackup:
    # cronjob schedule once per day at 2:10AM
    schedule: "10 2 * * *"

# A list of sealedSecrets passed in to be deployed.
sealedSecrets: []

setup:
  image:
    repository: artifactory.algol60.net/csm-docker/stable/cray-keycloak-setup
    tag: 3.9.0
    pullPolicy: Always
  keycloak:
    service: keycloak
    clusterGw:
      dnsName: api-gw-service-nmn.local
      route: /keycloak
    adminClient:
      id: admin-client
      secret:
        name: admin-client-auth
        namespaces:
          - services
          - default
          - ims
    systemComputeClient:
      id: system-compute-client
      secret:
        name: system-compute-client-auth
        namespaces:
          - services
          - default
          - ims
    systemPXEClient:
      id: system-pxe-client
      secret:
        name: system-pxe-client-auth
        namespaces:
          - services
          - default
          - ims
    systemNexusClient:
      id: system-nexus-client
      secret:
        name: system-nexus-client-auth
        namespaces:
          - services
          - default
          - nexus
    systemSlingshotClient:
      id: system-slingshot-client
      secret:
        name: system-slingshot-client-auth
        namespaces:
          - services
    wlmClient:
      id: wlm-client
      secret:
        name: wlm-client-auth
        namespaces:
          - services
          - default
          - user
    gatekeeper:
      client:
        id: gatekeeper
        secret:
          name: keycloak-gatekeeper-client
          namespaces:
            - services
      proxiedHosts:
        - shs_prometheus.local
        - shs_alertmanager.local
        - shs_grafana.local
        - istio_prometheus.local
        - istio_grafana.local
        - istio_kiali.local
        - istio_jaeger.local
        - kube_monitoring_prometheus.local
        - kube_monitoring_alertmanager.local
        - kube_monitoring_grafana.local
        - ceph_monitoring_prometheus.local
        - vcs_hostname.local
        - sma-grafana.local
        - sma-kibana.local
    clients:
      oauth2-proxy-customer-management:
        type: confidential
        standardFlowEnabled: true
        serviceAccountsEnabled: true
        proxiedHosts:
        - override-me.cmn.local
        secret:
          name: oauth2-proxy-customer-management-client
          namespaces:
          - services
      oauth2-proxy-customer-access:
        type: confidential
        standardFlowEnabled: true
        serviceAccountsEnabled: true
        proxiedHosts:
        - override-me.can.local
        secret:
          name: oauth2-proxy-customer-access-client
          namespaces:
          - services
      oauth2-proxy-customer-high-speed:
        type: confidential
        standardFlowEnabled: true
        serviceAccountsEnabled: true
        proxiedHosts:
        - override-me.chn.local
        secret:
          name: oauth2-proxy-customer-high-speed-client
          namespaces:
          - services
    customerAccessUrl: "https://auth.local/keycloak"
    masterAdminSecretName: keycloak-master-admin-auth

keycloakx:

  # Name override for backwards compatability
  nameOverride: "keycloak"
  fullnameOverride: "cray-keycloak"

  # Custom value for init container image source
  kubectl:
    image:
      repository: artifactory.algol60.net/csm-docker/stable/docker-kubectl
      tag: 1.32.2
      pullPolicy: IfNotPresent

  # A list of gateways that keycloak is exposed
  ingress:
    gateways:
    - "services-gateway"
    - "customer-admin-gateway"
    - "customer-user-gateway"
    - "hmn-gateway"

  test:
    image:
      repository: artifactory.algol60.net/csm-docker/stable/docker.io/unguiculus/docker-python3-phantomjs-selenium

  replicas: 3
  podManagementPolicy: Parallel
  podAnnotations:
    # port 7600 is used for jgroups (Java clustering) traffic
    # it's UDP and non-HTTP so need to prevent istio from wrapping.
    traffic.sidecar.istio.io/excludeInboundPorts: '7600'
    traffic.sidecar.istio.io/excludeOutboundPorts: '7600'
  image:
    repository: artifactory.algol60.net/csm-docker/stable/quay.io/keycloak/keycloak
    tag: 21.1.1
  command:
    - "/opt/keycloak/bin/kc.sh"
    - "start"
    - "--http-enabled=true"
    - "--http-port=8080"
    - "--hostname-strict=false"
    - "--hostname-strict-https=false"
    - "--spi-truststore-file-file=/certs/certs.jks"
    - "--spi-truststore-file-password=password"
    - "--spi-truststore-file-hostname-verification-policy=WILDCARD"
  extraEnv: |
    - name: JAVA_OPTS_APPEND
      value: >-
        -Djgroups.dns.query={{ include "keycloak.fullname" . }}-headless
    - name: KEYCLOAK_ADMIN
      valueFrom:
        secretKeyRef:
          name: keycloak-master-admin-auth
          key: user
    - name: KEYCLOAK_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          name: keycloak-master-admin-auth
          key: password

  proxy:
    enabled: true
    mode: passthrough

  serviceAccount:
    create: false
    name: jobs-watcher
  # When nodeAffinity isn't needed anymore, note that the podAntiAffinity is
  # copied from the defaults so `affinity` can be removed.
  priorityClassName: csm-high-priority-service
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "keycloak.selectorLabels" . | nindent 10 }}
            matchExpressions:
              - key: role
                operator: NotIn
                values:
                  - test
          topologyKey: kubernetes.io/hostname
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: no_external_access
            operator: NotIn
            values:
            - "True"

  dbchecker:
    enabled: false

  database:
    vendor: postgres
    hostname: keycloak-postgres
    port: 5432
    database: service_db
    username: service_account
    existingSecret: service-account.keycloak-postgres.credentials

  # This is copied from cray-services
  extraInitContainers: |
    - name: keycloak-wait-for-postgres
      image: {{ .Values.kubectl.image.repository }}:{{ .Values.kubectl.image.tag }}
      imagePullPolicy: {{ .Values.kubectl.image.pullPolicy }}
      command:
      - /bin/sh
      - -c
      - |
        while true; do
          JOB_CONDITION="$(kubectl get jobs -n services -l app.kubernetes.io/name=keycloak-wait-for-postgres -o jsonpath='{.items[0].status.conditions[0].type}')"
          JOB_CONDITION_RC=$?
          if [ $JOB_CONDITION_RC -eq 0 ]; then
            if [ "$JOB_CONDITION" == 'Complete' -o "$JOB_CONDITION" == 'SuccessCriteriaMet' ]; then
              echo "Completed"
              break
            fi
            echo "Waiting for the keycloak-wait-for-postgres job in the services namespace to complete, current condition is $(kubectl get jobs -n services -l app.kubernetes.io/name=keycloak-wait-for-postgres -o jsonpath='{.items[0].status}')"
            sleep 3
          elif [ $JOB_CONDITION_RC -ne 1 ]; then
            echo "'kubectl get jobs' failed with exit code $JOB_CONDITION_RC , failing"
            exit 1
          else
            echo "'kubectl get jobs' failed with exit code $JOB_CONDITION_RC , will retry"
            sleep 3
          fi
        done
      resources:
        limits:
          cpu: 500m
          memory: 100Mi
        requests:
          cpu: 30m
          memory: 20Mi
    - name: rsa-plugin
      image: artifactory.algol60.net/csm-docker/stable/docker.io/library/alpine:3.15
      imagePullPolicy: IfNotPresent
      command:
        - sh
      args:
        - -c
        - |
          echo "Copying Provider..."
          cp /mnt/rsa-plugin/RSA-CLI-Provider.jar /providers/
          cp /mnt/rsa-plugin/RSA-Plugin-Provider.jar /providers/
          echo "Copying Theme..."
          mkdir -p /themes/shasta-rsa/login/
          cp /mnt/rsa-plugin/RSAAuthenticator.ftl /themes/shasta-rsa/login/
          echo -e "parent=base\nimport=common/keycloak" > /themes/shasta-rsa/theme.properties
      volumeMounts:
        - name: providers
          mountPath: /providers
        - name: rsa-plugin-plugin-volume
          mountPath: /mnt/rsa-plugin
        - name: themes
          mountPath: /themes

  http:
    relativePath: '/keycloak'

  resources:
    requests:
      memory: "1500Mi"
      cpu: "1000m"
    limits:
      memory: "5000Mi"
      cpu: "4000m"
  # Contains the CA cert, it's created outside of this chart and may be updated by localization.
  extraVolumes: |
    - name: certs-volume
      secret:
        secretName: keycloak-certs
    - name: rsa-plugin-plugin-volume
      configMap:
        name: cray-keycloak-rsa-plugin
    - name: providers
      emptyDir: {}
    - name: themes
      emptyDir: {}
  extraVolumeMounts: |
    - mountPath: /certs
      name: certs-volume
      readOnly: true
    - name: rsa-plugin-plugin-volume
      mountPath: /mnt/rsa-plugin
      readOnly: true
    - name: providers
      mountPath: /opt/keycloak/providers
    - name: themes
      mountPath: /opt/keycloak/themes
