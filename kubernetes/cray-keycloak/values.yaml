#
# MIT License
#
# (C) Copyright 2020-2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
sqlCluster:
  image:
    repository: artifactory.algol60.net/csm-docker/stable/docker.io/library/postgres
    tag: 13.2-alpine
    pullPolicy: IfNotPresent

# A list of sealedSecrets passed in to be deployed.
sealedSecrets: []

setup:
  image:
    repository: artifactory.algol60.net/csm-docker/stable/cray-keycloak-setup
    # tag defaults to chart appVersion which is set by jenkins during build based on .version file
    pullPolicy: Always
  keycloak:
    service: keycloak
    clusterGw:
      dnsName: api-gw-service-nmn.local
      route: /keycloak
    adminClient:
      id: admin-client
      secret:
        name: admin-client-auth
        namespaces:
          - services
          - default
          - ims
    systemComputeClient:
      id: system-compute-client
      secret:
        name: system-compute-client-auth
        namespaces:
          - services
          - default
          - ims
    systemPXEClient:
      id: system-pxe-client
      secret:
        name: system-pxe-client-auth
        namespaces:
          - services
          - default
          - ims
    systemNexusClient:
      id: system-nexus-client
      secret:
        name: system-nexus-client-auth
        namespaces:
          - services
          - default
          - nexus
    wlmClient:
      id: wlm-client
      secret:
        name: wlm-client-auth
        namespaces:
          - services
          - default
          - user
    gatekeeper:
      client:
        id: gatekeeper
        secret:
          name: keycloak-gatekeeper-client
          namespaces:
            - services
      proxiedHosts:
        - shs_prometheus.local
        - shs_alertmanager.local
        - shs_grafana.local
        - istio_prometheus.local
        - istio_grafana.local
        - istio_kiali.local
        - istio_jaeger.local
        - kube_monitoring_prometheus.local
        - kube_monitoring_alertmanager.local
        - kube_monitoring_grafana.local
        - ceph_monitoring_prometheus.local
        - vcs_hostname.local
        - sma-grafana.local
        - sma-kibana.local
    clients:
      oauth2-proxy-customer-management:
        type: confidential
        standardFlowEnabled: true
        serviceAccountsEnabled: true
        proxiedHosts:
        - override-me.cmn.local
        secret:
          name: oauth2-proxy-customer-management-client
          namespaces:
          - services
      oauth2-proxy-customer-access:
        type: confidential
        standardFlowEnabled: true
        serviceAccountsEnabled: true
        proxiedHosts:
        - override-me.can.local
        secret:
          name: oauth2-proxy-customer-access-client
          namespaces:
          - services
      oauth2-proxy-customer-high-speed:
        type: confidential
        standardFlowEnabled: true
        serviceAccountsEnabled: true
        proxiedHosts:
        - override-me.chn.local
        secret:
          name: oauth2-proxy-customer-high-speed-client
          namespaces:
          - services
    customerAccessUrl: "https://auth.local/keycloak"
    masterAdminSecretName: keycloak-master-admin-auth

keycloak:
  # Custom value for init container image source
  kubectl:
    image:
      repository: artifactory.algol60.net/csm-docker/stable/docker-kubectl
      tag: 1.19.15
      pullPolicy: IfNotPresent

  # A list of gateways that keycloak is exposed
  ingress:
    gateways:
    - "services-gateway"
    - "customer-admin-gateway"
    - "customer-user-gateway"
    - "hmn-gateway"

  test:
    image:
      repository: artifactory.algol60.net/csm-docker/stable/docker.io/unguiculus/docker-python3-phantomjs-selenium
  
  replicas: 3
  podAnnotations:
    # port 7600 is used for jgroups (Java clustering) traffic
    # it's UDP and non-HTTP so need to prevent istio from wrapping.
    traffic.sidecar.istio.io/excludeInboundPorts: '7600'
    traffic.sidecar.istio.io/excludeOutboundPorts: '7600'
  image:
    repository: docker.io/jboss/keycloak
    tag: 16.1.1
  # NOTE: When upgrading this should be able to be removed. -XX:+UseContainerSupport is the default in chart version 7.3.0
  extraEnv: |
    - name: JAVA_OPTS
      value: -XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0 -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_USER_FILE
      value: /secrets/keycloak-creds/user
    - name: KEYCLOAK_PASSWORD_FILE
      value: /secrets/keycloak-creds/password

  serviceAccount:
    create: false
    name: jobs-watcher
  # When nodeAffinity isn't needed anymore, note that the podAntiAffinity is
  # copied from the defaults so `affinity` can be removed.
  priorityClassName: csm-high-priority-service
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "keycloak.selectorLabels" . | nindent 10 }}
            matchExpressions:
              - key: role
                operator: NotIn
                values:
                  - test
          topologyKey: kubernetes.io/hostname
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: no_external_access
            operator: NotIn
            values:
            - "True"
  # cray-postgres-operator provides the secret, etc.
  persistence:
    dbVendor: postgres
    dbName: service_db
    dbHost: keycloak-postgres
    existingSecret: service-account.keycloak-postgres.credentials
    existingSecretPasswordKey: password
    existingSecretUsernameKey: username
  # This is copied from cray-services
  extraInitContainers: |
    - name: keycloak-wait-for-postgres
      image: {{ .Values.kubectl.image.repository }}:{{ .Values.kubectl.image.tag }}
      imagePullPolicy: {{ .Values.kubectl.image.pullPolicy }}
      command:
      - /bin/sh
      - -c
      - |
        while true; do
          JOB_CONDITION="$(kubectl get jobs -n services -l app.kubernetes.io/name=keycloak-wait-for-postgres -o jsonpath='{.items[0].status.conditions[0].type}')"
          JOB_CONDITION_RC=$?
          if [ $JOB_CONDITION_RC -eq 0 ]; then
            if [ "$JOB_CONDITION" == 'Complete' ]; then
              echo "Completed"
              break
            fi
            echo "Waiting for the keycloak-wait-for-postgres job in the services namespace to complete, current condition is $(kubectl get jobs -n services -l app.kubernetes.io/name=keycloak-wait-for-postgres -o jsonpath='{.items[0].status}')"
            sleep 3
          elif [ $JOB_CONDITION_RC -ne 1 ]; then
            echo "'kubectl get jobs' failed with exit code $JOB_CONDITION_RC , failing"
            exit 1
          else
            echo "'kubectl get jobs' failed with exit code $JOB_CONDITION_RC , will retry"
            sleep 3
          fi
        done
      resources:
        limits:
          cpu: 500m
          memory: 100Mi
        requests:
          cpu: 30m
          memory: 20Mi

  contextPath: keycloak
  
  livenessProbe: |
    httpGet:
      path: {{ if ne .Values.contextPath "" }}/{{ .Values.contextPath }}{{ end }}/
      port: http
    initialDelaySeconds: 0
    timeoutSeconds: 5
  
  readinessProbe: |
    httpGet:
      path: {{ if ne .Values.contextPath "" }}/{{ .Values.contextPath }}{{ end }}/realms/master
      port: http
    initialDelaySeconds: 60
    timeoutSeconds: 1
  
  startupProbe: |
    httpGet:
      path: {{ if ne .Values.contextPath "" }}/{{ .Values.contextPath }}{{ end }}/
      port: http
    initialDelaySeconds: 60
    timeoutSeconds: 1
    failureThreshold: 60
    periodSeconds: 5

  
  # We've seen keycloak terminated with the default 5sec timeout, so increase to 30sec
  #livenessProbe: |
  #  httpGet:
  #    path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/
  #    port: http
  #  initialDelaySeconds: 300
  #  timeoutSeconds: 30
  #readinessProbe: |
  #  httpGet:
  #    path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/realms/master
  #    port: http
  #  initialDelaySeconds: 30
  #  timeoutSeconds: 30
  resources:
    requests:
      memory: "1500Mi"
      cpu: "1000m"
    limits:
      memory: "5000Mi"
      cpu: "4000m"
  cli:
    # Configures Keycloak to read a CA cert from /certs/cert.jks, would contain the custom LDAP server certificate.
    custom: |
      /subsystem=keycloak-server/spi=truststore:add()
      /subsystem=keycloak-server/spi=truststore/provider=file:add(enabled=true)
      /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=properties.file,value=/certs/certs.jks)
      /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=properties.password,value=password)
      /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=properties.hostname-verification-policy,value=WILDCARD)
      /subsystem=keycloak-server/spi=truststore/provider=file:write-attribute(name=properties.disabled,value=false)
  # Contains the CA cert, it's created outside of this chart and may be updated by localization.
  extraVolumes: |
    - name: certs-volume
      secret:
        secretName: keycloak-certs
    - name: rsa-plugin-plugin-volume
      configMap:
        name: cray-keycloak-rsa-plugin
    - name: keycloak-creds
      secret:
        secretName: keycloak-master-admin-auth
  extraVolumeMounts: |
    - mountPath: /certs
      name: certs-volume
      readOnly: true
    - name: rsa-plugin-plugin-volume
      mountPath: /mnt/rsa-plugin
      readOnly: true
    - name: keycloak-creds
      mountPath: /secrets/keycloak-creds
      readOnly: true
  startupScripts:
    rsa_plugin_cli: "cp /mnt/rsa-plugin/RSA-CLI-Provider.jar /opt/jboss/keycloak/standalone/deployments/"
    rsa_plugin_plugin: "cp /mnt/rsa-plugin/RSA-Plugin-Provider.jar /opt/jboss/keycloak/standalone/deployments/"
    rsa_plugin_theme: "cp /mnt/rsa-plugin/RSAAuthenticator.ftl /opt/jboss/keycloak/themes/base/login/"
    contextPath.cli: |
      embed-server --server-config=standalone-ha.xml --std-out=echo
      batch
      {{- if ne .Values.contextPath "auth" }}
      /subsystem=keycloak-server/:write-attribute(name=web-context,value={{ if eq .Values.contextPath "" }}/{{ else }}{{ .Values.contextPath }}{{ end }})
      {{- if eq .Values.contextPath "" }}
      /subsystem=undertow/server=default-server/host=default-host:write-attribute(name=default-web-module,value=keycloak-server.war)
      {{- end }}
      {{- end }}
      run-batch
      stop-embedded-server

postgresDbBackup:
  enabled: true
  image:
    repository: artifactory.algol60.net/csm-docker/stable/cray-postgres-db-backup
    tag: 0.2.3
    pullPolicy: IfNotPresent

  storageBucket: postgres-backup
  storageSecret: postgres-backup-s3-credentials

  schedule: "10 2 * * *"  # Once per day at 2:10AM

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources:
    limits:
      cpu: 1000m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 200Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}
